@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @ErrorMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="(() => {ErrorMessage = string.Empty;})"></button>
        </div>
    </div>
}

@if (Artists == null)
{
    <Loading />
}
else
{
    <form>
        <p>
            Artist: <input type="text" @bind="@SearchString" placeholder="Search Artist Here.." />
            <input type="button" value="Search" @onclick="SearchArtist" />
        </p>
    </form>

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist>? Artists;
    private string? ErrorMessage;
    public string? SearchString { get; set; }
    [Inject] IHomeService HomeService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        Artists = await HomeService.GetArtistsAsync();
    }

    private async void SearchArtist()
    {
        try
        {
            List<Artist> allArtists = await HomeService.GetArtistsAsync();
            if (!string.IsNullOrEmpty(SearchString))
            {
                Artists = allArtists.Where(artist => !string.IsNullOrEmpty(artist.Name) && artist.Name.Contains(SearchString)).ToList();
            }
            else
            {
                Artists = allArtists;
            }
        }
        catch (Exception exception)
        {
            ErrorMessage = exception.Message;
        }
    }
}
